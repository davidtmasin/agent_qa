# -*- coding: utf-8 -*-
"""ChatBot-QA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1TpHv8rQoqJ3Y-BIkuOPoHQZPxILnByU4
"""

# Instalar Framework ADK de agentes do Google ################################################
!pip install -q google-adk

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)

import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Mentor QA --- #
##########################################
def agente_mentor_qa(topico):

    mentor_qa = Agent(
        name="agente_mentor_qa",
        model="gemini-2.0-flash",
        instruction="""
        Você é um profissional especialista em qualidade de software e testes, com a capacidade
        de mentorar quaisquer pessoas, tanto as que atuam nessa área (novatos ou veteranos) quanto àquelas que estão em transição.

        Seus conhecimentos são baseados:

        - Na literatura dos autores de maior relevância na área de Qualidade de Software e Testes como,
        Roger Pressman, Robert C. Martin (Uncle Bob), Martin Fowler, Kent Beck, Elisabeth Hendrickson, Joseph Juran,
        Philip Crosby, Edwards Deming, Armand Feigenbaum, Kaoru Ishikawa e Ian Sommerville.

        - Em conteúdos dos materiais do ISTQB/BSTQB (Syllabus) para os exames de certificação como,
        CTFL, CTAL e demais certificações relevantes para área de qualidade de software e testes.

        - Em documentações oficiais de ferramentas utilizadas na realização dos testes, por exemplo, ferramentas de automação web (Cypress, Selenium, Playwright, Robotframework, etc),
        ferramentas de teste de API (Postman, Insomnia, etc), ferramentas para gestão dos testes e dos bugs (Jira, TestLink, Bugzilla, Qase, etc), ferramentas de testes de performance (Jmeter, K6, Locust, etc), etc.

        Adote a ferramenta do Google (google_search) a seu favor para ter acesso à informações relevantes sobre a área de qualidade de software e testes para te ajudar a engrandecer
        sua base de conhecimento com informações valiosas e úteis.

        Caso o usuário realize perguntas quem são totalmente fora do contexto do qual você é especialista, você tem a liberdade de interromper o assunto de forma totalmente cortês pois, seu foco não é esse, visto que você
        é um especialista em qualidade de software e testes. Busque orientar o usuário sobre seu propósito para que ele evite questionar sobre questões fora do seu contexto.

        """,
        description="Agente que ajuda em qualquer assunto dentro da área de QA",
        tools=[google_search]
    )

    entrada_do_mentor_qa = f"Tópico: {topico}"

    mentoria = call_agent(mentor_qa, entrada_do_mentor_qa)
    return mentoria

#####################################################
# --- Agente 2: Especialista em Plano de Testes --- #
#####################################################
def agente_expert_plano_de_testes(contexto):
  expert_plano_de_testes = Agent(
        name="agente_expert_plano_de_testes",
        model="gemini-2.0-flash",
        instruction="""
        Você é um expert em QA que sabe bastante sobre como elaborar e estruturar planos de testes impecáveis para qualquer projeto de software.

        Seja didático na sua explicação do plano de testes, principalmente para aqueles usuários que você notar que não apresentam tanta familiaridade na
        elaboração de um plano de testes.

        Você pode fornecer um modelo exemplo de um plano de testes baseado na proposta do software que está sendo avaliado para testes.

        Se o usuário te fornecer um exemplo de plano de testes, avalie com atenção, forneça feedbacks construtivos e se for cabível, forneça dicas para melhorias.
        """,
        description="Agente que ajuda com Plano de Testes",
        tools=[google_search]
  )
  entrada_do_expert_plano_de_testes = f"Contexto: {contexto}"
  plano = call_agent(expert_plano_de_testes, entrada_do_expert_plano_de_testes)
  return plano

print("#################################################")
print("######## 🚀 Iniciando o Mestre QA... 🚀 ########")
print("#################################################")
print("\n")
print("🤖 Olá, humano(a)! Eu meu chamo OneQway, sou seu mestre digital de QA.\n")
print("🤖 Para te guiar da melhor forma possível, listo as seguintes opções:")
print("1️⃣ para aprender sobre qualquer assunto dentro da área de QA.")
print("2️⃣ para conversar especificamente da elaboração de um Plano de Testes.")
print("3️⃣ para conversar especificamente da elaboração dos Cenários e Casos de Teste.")
print("4️⃣ para conversar especificamente da elaboração do Relátorio de Bugs.")
print("5️⃣ para conversar especificamente da elobração do Resultado dos Testes.")

opcao_valida = False

while not opcao_valida:  # Enquanto a opção NÃO for válida...
    opcao = input("\n🤖 Agora me forneça uma opção válida: ")

    # MENTOR QA ################################################
    if opcao == "1":
      opcao_valida = True  # Agora a opção é válida, podemos sair do while
      print("\n🚀 Legal! Vamos aprender sobre QA!")
      topico = input("\n🤖 O que você gostaria de aprender hoje dentro do universo QA❓\n")

      if not topico:
          print("\n🤖 Preciso que me informe o que você gostaria de aprender hoje❗\n")
          print("#################################################")
      else:
          print(f"\n🤖 Maravilha! Um momento, estou verificando minha base de conhecimento sobre: {topico}.\n")
          base_de_conhecimento = agente_mentor_qa(topico)
          print("📝 Resultado Obtido da Base de Conhecimento QA")
          display(to_markdown(base_de_conhecimento))
          print("\n🤖 Caso deseje encerrar nossa conversa, basta digitar 'FIM'.\n")

          while True:
            topico = input("🤖 O que gostaria de aprender agora❓\n")
            if topico.lower() == 'fim':
              print('\n🤖 Até a próxima, humano(a)❗')
              break
            else:
              base_de_conhecimento = agente_mentor_qa(topico)
              display(to_markdown(base_de_conhecimento))
              print("\n🤖 Caso deseje encerrar nossa conversa, basta digitar 'FIM'.\n")

    # PLANO DE TESTES ################################################
    elif opcao == "2":
      print("\n📝 Ótimo! Vamos falar sobre Plano de Testes.")
      opcao_valida = True
      contexto = input("\n🤖 O que você gostaria de saber sobre Plano de Testes❓\n")

      if not contexto:
          print("\n🤖 Preciso que me informe o que você gostaria de saber sobre Plano de Testes❗\n")
          print("#################################################")

      else:
          print(f"\n🤖 Maravilha! Um momento, estou analisando seu contexto: {contexto}.\n")
          contexto_plano = agente_expert_plano_de_testes(contexto)
          print("📝 Resultado Obtido ")
          display(to_markdown(contexto_plano))
          print("\n🤖 Caso deseje encerrar nossa conversa, basta digitar 'FIM'.\n")

          while True:
            contexto = input("🤖 O que gostaria de saber agora sobre Plano de Testes❓\n")
            if contexto.lower() == 'fim':
              print('\n🤖 Até a próxima, humano(a)❗')
              break
            else:
              contexto_plano = agente_expert_plano_de_testes(contexto)
              display(to_markdown(contexto_plano))
              print("\n🤖 Caso deseje encerrar nossa conversa, basta digitar 'FIM'.\n")




    # elif opcao == "3":
    #   print("\n✍️ Ótimo! Vamos falar sobre Cenários e Casos de Teste.")
    #   opcao_valida = True

    # elif opcao == "4":
    #   print("\n🐞 Ótimo! Vamos falar sobre Relátorio de Bugs.")
    #   opcao_valida = True

    # elif opcao == "5":
    #   print("\n📊 Ótimo! Vamos falar sobre Resultado dos Testes.")
    #   opcao_valida = True

    else:
      print("\n🤔 Hmm, essa não é uma opção válida. Tente de novo!")